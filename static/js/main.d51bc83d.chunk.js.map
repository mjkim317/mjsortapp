{"version":3,"sources":["sortingviz/Header.js","algorithm/BubbleSort.js","algorithm/SelectionSort.js","algorithm/MergeSort.js","algorithm/QuickSort.js","algorithm/HeapSort.js","sortingviz/sortViz.js","algorithm/InsertionSort.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Component","getBubbleSortAnimations","array","animations","auxillaryArray","slice","N","length","i","j","push","swap","bubbleSort","sort","a","b","firstIndex","secondIndex","temp","getSelectionSortAnimations","minIndex","selectionSort","javaScriptSortedArray","console","log","firstArray","secondArray","arraysAreEqual","getMergeSort","auxiliaryArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","merge","getQuickSortAnimations","quickSort","startIndex","endIndex","pivotIndex","pivot","partitionArray","getHeapSortAnimations","len","HeapSort","HeapSortHelper","parent","size","temp_parent","left_child","right_child","PRIMARY_COLOR","SECONDARY_COLOR","SortingViz","props","afterFunc","e","setTimeout","list","saveToFile_Chrome","fn_newCallBack","state","setState","afterFunc1","afterFunc2","insertionSort","afterFunc3","afterFunc4","mergeSort","afterFunc5","heapSort","this","resetArray","isColorChange","arrayBars","document","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","backgroundColor","barIndex","newHeight","barStyle","height","parseInt","key","getInsertionSortAnimations","barOneIdx","barTwoIdx","file","target","files","fileReader","FileReader","onload","result","split","Number","readAsText","for","type","id","display","accept","onChange","handleChange","bind","handleChange4","handleChange1","handleChange2","handleChange3","handleChange5","map","value","idx","React","fileName","content","blob","Blob","objURL","window","URL","createObjectURL","__Xr_objURL_forCreatingFile__","revokeObjectURL","createElement","download","href","click","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d51bc83d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport './header.css';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"randomheader\">\n                <h1>upload file and sort</h1>                \n            </div>\n        );\n    }\n}\n\nexport default Header;\n","export function getBubbleSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b); //sort 잘 됐는지 체크(boolean)\n    //console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        for (let j = 0; j < N - i - 1; j++) {\n            animations.push([j, j + 1]);\n            animations.push([j, j + 1]);\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n                animations.push([j, auxillaryArray[j + 1]]);\n                animations.push([j + 1, auxillaryArray[j]]);\n                swap(auxillaryArray, j, j + 1);\n            } else {\n                animations.push([-1, -1]);\n                animations.push([-1, -1]);\n            }\n        }\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}","export function getSelectionSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"selection sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}","export function getMergeSort(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(\n    mainArray, startIdx, endIdx, auxiliaryArray, animations\n) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction merge(\n    mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations\n) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}","export function getQuickSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swap(auxillaryArray, i, pivotIndex);\n            pivotIndex++;\n        } else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n","export function getHeapSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    let len = array.length;\n    HeapSortHelper(auxillaryArray, animations, len);\n    array = auxillaryArray;\n    console.log(animations);\n    return [animations, array];\n}\n\nfunction HeapSortHelper(auxillaryArray, animations, len)\n{\n    for(let i = len/2-1; i >= 0; i--){\n        HeapSort(auxillaryArray, animations, i, len);\n    }\n    \n    for(let i = len-1; i>0; --i){\n        \n        swap(animations, auxillaryArray, 0, i);\n        HeapSort(auxillaryArray, animations, 0, i);\n\n    }\n}\nfunction HeapSort(auxillaryArray, animations, parent, size) {\n    var temp_parent = parent;\n    var left_child = parent * 2 + 1;\n    var right_child = parent * 2 + 2;\n\n    console.log(auxillaryArray);\n\n    if(left_child < size && auxillaryArray[temp_parent] < auxillaryArray[left_child]){\n        temp_parent = left_child;\n    }\n\n    if(right_child < size && auxillaryArray[temp_parent] < auxillaryArray[right_child]){\n        temp_parent = right_child;\n    }\n\n    if(parent != temp_parent){\n        /*animations.push([temp_parent, parent]);\n        animations.push([temp_parent, parent]);\n        animations.push([parent, auxillaryArray[temp_parent]]);\n        animations.push([temp_parent, auxillaryArray[parent]]);*/\n        swap(animations, auxillaryArray, parent, temp_parent);\n        HeapSort(auxillaryArray, animations, temp_parent, size);\n    }\n    else {\n        animations.push([temp_parent, parent]);\n        animations.push([temp_parent, parent]);\n        animations.push([-1, auxillaryArray[temp_parent]]);\n        animations.push([-1, auxillaryArray[parent]]);\n    }\n}\n\nfunction swap(animations, auxillaryArray, firstIndex, secondIndex) {\n    animations.push([firstIndex, secondIndex]);\n    animations.push([firstIndex, secondIndex]);\n    animations.push([firstIndex, auxillaryArray[secondIndex]]);\n    animations.push([secondIndex, auxillaryArray[firstIndex]]);\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\n","import React from 'react';\nimport Header from './Header';\nimport './SortingViz.css';\nimport {getBubbleSortAnimations} from '../algorithm/BubbleSort.js'\nimport {getSelectionSortAnimations} from '../algorithm/SelectionSort.js'\nimport {getInsertionSortAnimations} from '../algorithm/InsertionSort.js'\nimport {getMergeSort} from '../algorithm/MergeSort.js'\nimport {getQuickSortAnimations} from '../algorithm/QuickSort.js'\nimport {getHeapSortAnimations} from '../algorithm/HeapSort.js'\n\nconst ANIMATION_SPEED_MS = 1;\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'yellow';\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingViz extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            array: [],\n        }\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    resetArray(){\n        const array = [];\n        for(let i=1;i<=100;i++){\n            array.push(i*5)\n        }\n        this.setState({array})\n    }\n\n    bubbleSort(){\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1); //bool\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style; //height\n                const barTwoStyle = arrayBars[barTwoIndex].style;   //height\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    selectionSort(){\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n\n    }\n\n    insertionSort(){\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n\n    }\n\n    quickSort(){\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if(barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n\n    }\n\n    mergeSort(){\n        const animations = getMergeSort(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                },   i * ANIMATION_SPEED_MS);\n            }\n            else {\n                setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    heapSort(){\n        const [animations,sortArray] = getHeapSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1); //bool\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style; //height\n                const barTwoStyle = arrayBars[barTwoIndex].style;   //height\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    afterFunc = (e) => {\n        function fn_newCallBack(array){\n            var list = array;\n            for(var i=0; i< list.length; i++) {\n                list[i] = list[i]/5;\n            }\n            saveToFile_Chrome(\"Bubblesort_result.txt\", list)\n        }          \n        setTimeout(fn_newCallBack(this.state.array), 0); \n        console.log(e);\n        this.setState( {array: e});\n        var result = this.state.array;\n        this.bubbleSort();\n        \n        //saveToFile_Chrome(\"result.txt\", list, function(){\n        //});\n    }\n\n    handleChange(e){\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n        let list;\n        fileReader.onload = () => {\n            //console.log(fileReader.result);\n            var text = fileReader.result\n            var array = text.split(\" \");\n            console.log(array);\n            for(var i=0; i<array.length; i++) {\n                array[i] = 5 * Number(array[i]);\n            }\n            list = array;\n            this.afterFunc(list);\n        };\n        fileReader.readAsText(file);\n    }\n\n    afterFunc1 = (e) => {\n        function fn_newCallBack(array){\n            var list = array;\n            for(var i=0; i< list.length; i++) {\n                list[i] = list[i]/5;\n            }\n            saveToFile_Chrome(\"Selectionsort_result.txt\", list)\n        }          \n        setTimeout(fn_newCallBack(this.state.array), 0); \n        console.log(e);\n        this.setState( {array: e});\n        //console.log(this.state.array);\n        this.selectionSort();\n    }\n\n    handleChange1(e){\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n        let list;\n        fileReader.onload = () => {\n            //console.log(fileReader.result);\n            var text = fileReader.result\n            var array = text.split(\" \");\n            console.log(array);\n            for(var i=0; i<array.length; i++) {\n                array[i] = 5 * Number(array[i]);\n            }\n            //console.log(array);\n            list = array;\n            this.afterFunc1(list);\n        };\n        fileReader.readAsText(file);\n    }\n\n    afterFunc2 = (e) => {\n        function fn_newCallBack(array){\n            var list = array;\n            for(var i=0; i< list.length; i++) {\n                list[i] = list[i]/5;\n            }\n            saveToFile_Chrome(\"Insertionsort_result.txt\", list)\n        }          \n        setTimeout(fn_newCallBack(this.state.array), 0); \n        console.log(e);\n        this.setState( {array: e});\n        //console.log(this.state.array);\n        this.insertionSort();\n    }\n\n    handleChange2(e){\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n        let list;\n        fileReader.onload = () => {\n            //console.log(fileReader.result);\n            var text = fileReader.result\n            var array = text.split(\" \");\n            console.log(array);\n            for(var i=0; i<array.length; i++) {\n                array[i] = 5 * Number(array[i]);\n            }\n            //console.log(array);\n            list = array;\n            this.afterFunc2(list);\n        };\n        fileReader.readAsText(file);\n    }\n\n    afterFunc3 = (e) => {\n        function fn_newCallBack(array){\n            var list = array;\n            for(var i=0; i< list.length; i++) {\n                list[i] = list[i]/5;\n            }\n            saveToFile_Chrome(\"Quicksort_result.txt\", list)\n        }          \n        setTimeout(fn_newCallBack(this.state.array), 0); \n        console.log(e);\n        this.setState( {array: e});\n        this.quickSort();\n    }\n\n    handleChange3(e){\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n        let list;\n        fileReader.onload = () => {\n            //console.log(fileReader.result);\n            var text = fileReader.result\n            var array = text.split(\" \");\n            console.log(array);\n            for(var i=0; i<array.length; i++) {\n                array[i] = 5 * Number(array[i]);\n            }\n            //console.log(array);\n            list = array;\n            this.afterFunc3(list);\n        };\n        fileReader.readAsText(file);\n    }\n\n    afterFunc4 = (e) => {\n        function fn_newCallBack(array){\n            var list = array;\n            for(var i=0; i< list.length; i++) {\n                list[i] = list[i]/5;\n            }\n            saveToFile_Chrome(\"Mergesort_result.txt\", list)\n        }          \n        setTimeout(fn_newCallBack(this.state.array), 0); \n        console.log(e);\n        this.setState( {array: e});\n        this.mergeSort();\n    }\n\n    handleChange4(e){\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n        let list;\n        fileReader.onload = () => {\n            //console.log(fileReader.result);\n            var text = fileReader.result\n            var array = text.split(\" \");\n            console.log(array);\n            for(var i=0; i<array.length; i++) {\n                array[i] = 5 * Number(array[i]);\n            }\n            //console.log(array);\n            list = array;\n            this.afterFunc4(list);\n        };\n        fileReader.readAsText(file);\n    }\n\n    afterFunc5 = (e) => {\n        function fn_newCallBack(array){\n            var list = array;\n            for(var i=0; i< list.length; i++) {\n                list[i] = list[i]/5;\n            }\n            saveToFile_Chrome(\"Heapsort_result.txt\", list)\n        }          \n        setTimeout(fn_newCallBack(this.state.array), 0); \n        console.log(e);\n        this.setState( {array: e});\n        var result = this.state.array;\n        this.heapSort();\n\n    }\n    handleChange5(e){\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n        let list;\n        fileReader.onload = () => {\n            //console.log(fileReader.result);\n            var text = fileReader.result\n            var array = text.split(\" \");\n            console.log(array);\n            for(var i=0; i<array.length; i++) {\n                array[i] = 5*Number(array[i]);\n            }\n            list = array;\n            this.afterFunc5(list);\n        };\n        fileReader.readAsText(file);\n    }\n\n    render(){\n        const {array} = this.state;\n        return(\n            <div className=\"randompage\">\n            <Header/>\n            <br/>\n                    <label className=\"input-file-button\" for=\"input-file\">Bubble Sort</label>\n                    <input type=\"file\" id=\"input-file\"  style={{display:\"none\"}} accept='.txt' onChange={this.handleChange.bind(this)}/>\n                    <label className=\"input-file-button4\" for=\"input-file4\">Merge Sort</label>\n                    <input type=\"file\" id=\"input-file4\"  style={{display:\"none\"}} accept='.txt' onChange={this.handleChange4.bind(this)}/> \n                    <label className=\"input-file-button1\" for=\"input-file1\">Selection Sort</label>\n                    <input type=\"file\" id=\"input-file1\"  style={{display:\"none\"}} accept='.txt' onChange={this.handleChange1.bind(this)}/> \n                    <label className=\"input-file-button2\" for=\"input-file2\">Insertion Sort</label>\n                    <input type=\"file\" id=\"input-file2\"  style={{display:\"none\"}} accept='.txt' onChange={this.handleChange2.bind(this)}/> \n                    <label className=\"input-file-button3\" for=\"input-file3\">Quick Sort</label>\n                    <input type=\"file\" id=\"input-file3\"  style={{display:\"none\"}} accept='.txt' onChange={this.handleChange3.bind(this)}/> \n                    <label className=\"input-file-button5\" for=\"input-file5\">Heap Sort</label>\n                    <input type=\"file\" id=\"input-file5\"  style={{display:\"none\"}} accept='.txt' onChange={this.handleChange5.bind(this)}/> \n            <br/>\n            <br/>\n            <br/>\n            <div className=\"array-container\">\n            {array.map((value,idx) => (\n                <div\n                className=\"array-bar\"\n                 key={idx}\n                 style={{height: `${value}px`}}\n                 ></div>\n            ))}\n            <br></br>\n            </div>\n            </div>\n        )\n    }\n}\n\nfunction arrayAreEqual(arrayOne,ArrayTwo){\n    if(arrayOne.length !== ArrayTwo.length) return false;\n    for(let i=0;i<arrayOne.length;i++){\n        if(arrayOne[i] !== ArrayTwo[i]) return false;\n    }\n    return true;\n}\n\nfunction saveToFile_Chrome(fileName, content) {\n    var blob = new Blob([content], { type: 'text/plain' });\n    var objURL = window.URL.createObjectURL(blob);\n            \n    // 이전에 생성된 메모리 해제\n    if (window.__Xr_objURL_forCreatingFile__) {\n        window.URL.revokeObjectURL(window.__Xr_objURL_forCreatingFile__);\n    }\n    window.__Xr_objURL_forCreatingFile__ = objURL;\n    var a = document.createElement('a');\n    a.download = fileName;\n    a.href = objURL;\n    a.click();\n}","export function getInsertionSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while (j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if (j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }\n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}","import React from 'react';\nimport SortingViz from '../src/sortingviz/sortViz'\nimport '../src/sortingviz/SortingViz.css'\nimport './App.css'\n\nfunction App() {\n    return ( \n      <div className = \"App\" >\n        <SortingViz/>\n      </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}